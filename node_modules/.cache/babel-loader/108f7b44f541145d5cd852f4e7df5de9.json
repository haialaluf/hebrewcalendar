{"ast":null,"code":"/*\n (c) 2011-2015, Vladimir Agafonkin\n SunCalc is a JavaScript library for calculating sun/moon position and light phases.\n https://github.com/mourner/suncalc\n*/\n(function () {\n  'use strict'; // shortcuts for easier to read formulas\n\n  var PI = Math.PI,\n      sin = Math.sin,\n      cos = Math.cos,\n      tan = Math.tan,\n      asin = Math.asin,\n      atan = Math.atan2,\n      acos = Math.acos,\n      rad = PI / 180; // sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n  // date/time constants and conversions\n\n  var dayMs = 1000 * 60 * 60 * 24,\n      J1970 = 2440588,\n      J2000 = 2451545;\n\n  function toJulian(date) {\n    return date.valueOf() / dayMs - 0.5 + J1970;\n  }\n\n  function fromJulian(j) {\n    return new Date((j + 0.5 - J1970) * dayMs);\n  }\n\n  function toDays(date) {\n    return toJulian(date) - J2000;\n  } // general calculations for position\n\n\n  var e = rad * 23.4397; // obliquity of the Earth\n\n  function rightAscension(l, b) {\n    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n  }\n\n  function declination(l, b) {\n    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n  }\n\n  function azimuth(H, phi, dec) {\n    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n  }\n\n  function altitude(H, phi, dec) {\n    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n  }\n\n  function siderealTime(d, lw) {\n    return rad * (280.16 + 360.9856235 * d) - lw;\n  }\n\n  function astroRefraction(h) {\n    if (h < 0) // the following formula works for positive altitudes only.\n      h = 0; // if h = -0.08901179 a div/0 would occur.\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n  } // general sun calculations\n\n\n  function solarMeanAnomaly(d) {\n    return rad * (357.5291 + 0.98560028 * d);\n  }\n\n  function eclipticLongitude(M) {\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)),\n        // equation of center\n    P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n  }\n\n  function sunCoords(d) {\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n    return {\n      dec: declination(L, 0),\n      ra: rightAscension(L, 0)\n    };\n  }\n\n  var SunCalc = {}; // calculates sun position for a given date and latitude/longitude\n\n  SunCalc.getPosition = function (date, lat, lng) {\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n        c = sunCoords(d),\n        H = siderealTime(d, lw) - c.ra;\n    return {\n      azimuth: azimuth(H, phi, c.dec),\n      altitude: altitude(H, phi, c.dec)\n    };\n  }; // sun times configuration (angle, morning name, evening name)\n\n\n  var times = SunCalc.times = [[-0.833, 'sunrise', 'sunset'], [-0.3, 'sunriseEnd', 'sunsetStart'], [-6, 'dawn', 'dusk'], [-12, 'nauticalDawn', 'nauticalDusk'], [-18, 'nightEnd', 'night'], [6, 'goldenHourEnd', 'goldenHour']]; // adds a custom time to the times config\n\n  SunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n  }; // calculations for sun times\n\n\n  var J0 = 0.0009;\n\n  function julianCycle(d, lw) {\n    return Math.round(d - J0 - lw / (2 * PI));\n  }\n\n  function approxTransit(Ht, lw, n) {\n    return J0 + (Ht + lw) / (2 * PI) + n;\n  }\n\n  function solarTransitJ(ds, M, L) {\n    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);\n  }\n\n  function hourAngle(h, phi, d) {\n    return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d)));\n  } // returns set time for the given sun altitude\n\n\n  function getSetJ(h, lw, phi, dec, n, M, L) {\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n  } // calculates sun times for a given date and latitude/longitude\n\n\n  SunCalc.getTimes = function (date, lat, lng) {\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n        Jnoon = solarTransitJ(ds, M, L),\n        i,\n        len,\n        time,\n        Jset,\n        Jrise;\n    var result = {\n      solarNoon: fromJulian(Jnoon),\n      nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n      time = times[i];\n      Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);\n      Jrise = Jnoon - (Jset - Jnoon);\n      result[time[1]] = fromJulian(Jrise);\n      result[time[2]] = fromJulian(Jset);\n    }\n\n    return result;\n  }; // moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\n\n  function moonCoords(d) {\n    // geocentric ecliptic coordinates of the moon\n    var L = rad * (218.316 + 13.176396 * d),\n        // ecliptic longitude\n    M = rad * (134.963 + 13.064993 * d),\n        // mean anomaly\n    F = rad * (93.272 + 13.229350 * d),\n        // mean distance\n    l = L + rad * 6.289 * sin(M),\n        // longitude\n    b = rad * 5.128 * sin(F),\n        // latitude\n    dt = 385001 - 20905 * cos(M); // distance to the moon in km\n\n    return {\n      ra: rightAscension(l, b),\n      dec: declination(l, b),\n      dist: dt\n    };\n  }\n\n  SunCalc.getMoonPosition = function (date, lat, lng) {\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec),\n        // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n      azimuth: azimuth(H, phi, c.dec),\n      altitude: h,\n      distance: c.dist,\n      parallacticAngle: pa\n    };\n  }; // calculations for illumination parameters of the moon,\n  // based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n  // Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\n\n  SunCalc.getMoonIllumination = function (date) {\n    var d = toDays(date || new Date()),\n        s = sunCoords(d),\n        m = moonCoords(d),\n        sdist = 149598000,\n        // distance from Earth to Sun in km\n    phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) - cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n    return {\n      fraction: (1 + cos(inc)) / 2,\n      phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n      angle: angle\n    };\n  };\n\n  function hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n  } // calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\n\n  SunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);else t.setHours(0, 0, 0, 0);\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1,\n        h2,\n        rise,\n        set,\n        a,\n        b,\n        xe,\n        ye,\n        d,\n        roots,\n        x1,\n        x2,\n        dx; // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n\n    for (var i = 1; i <= 24; i += 2) {\n      h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n      h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n      a = (h0 + h2) / 2 - h1;\n      b = (h2 - h0) / 2;\n      xe = -b / (2 * a);\n      ye = (a * xe + b) * xe + h1;\n      d = b * b - 4 * a * h1;\n      roots = 0;\n\n      if (d >= 0) {\n        dx = Math.sqrt(d) / (Math.abs(a) * 2);\n        x1 = xe - dx;\n        x2 = xe + dx;\n        if (Math.abs(x1) <= 1) roots++;\n        if (Math.abs(x2) <= 1) roots++;\n        if (x1 < -1) x1 = x2;\n      }\n\n      if (roots === 1) {\n        if (h0 < 0) rise = i + x1;else set = i + x1;\n      } else if (roots === 2) {\n        rise = i + (ye < 0 ? x2 : x1);\n        set = i + (ye < 0 ? x1 : x2);\n      }\n\n      if (rise && set) break;\n      h0 = h2;\n    }\n\n    var result = {};\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n    return result;\n  }; // export as Node module / AMD module / browser variable\n\n\n  if (typeof exports === 'object' && typeof module !== 'undefined') module.exports = SunCalc;else if (typeof define === 'function' && define.amd) define(SunCalc);else window.SunCalc = SunCalc;\n})();","map":null,"metadata":{},"sourceType":"script"}