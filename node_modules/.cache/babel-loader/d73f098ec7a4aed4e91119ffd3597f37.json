{"ast":null,"code":"/*\n\tHebcal - A Jewish Calendar Generator\n\tCopyright (C) 1994-2004  Danny Sadinoff\n\tPortions Copyright (c) 2002 Michael J. Radwin. All Rights Reserved.\n\n\thttps://github.com/hebcal/hebcal-js\n\n\tThis program is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\n\tThis program is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\tGNU General Public License for more details.\n\n\tYou should have received a copy of the GNU General Public License\n\talong with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\tDanny Sadinoff can be reached at danny@sadinoff.com\n\n\tMichael Radwin has made significant contributions as a result of\n\tmaintaining hebcal.com.\n\n\tThe JavaScript code was completely rewritten in 2014 by Eyal Schachter.\n */\nvar floor = Math.floor,\n    t0t1 = [30, 31],\n    tMonthLengths = [0, 31, 28, 31].concat(t0t1, t0t1, 31, t0t1, t0t1),\n    monthLengths = [tMonthLengths.slice()];\ntMonthLengths[2]++;\nmonthLengths.push(tMonthLengths);\n\nexports.daysInMonth = function (month, year) {\n  // 1 based months\n  return monthLengths[+LEAP(year)][month];\n};\n\nexports.monthNames = ['', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nexports.lookupMonthNum = function (month) {\n  return new Date(month + ' 1').getMonth() + 1;\n};\n\nfunction dayOfYear(date) {\n  if (!date instanceof Date) {\n    throw new TypeError('Argument to greg.dayOfYear not a Date');\n  }\n\n  var doy = date.getDate() + 31 * date.getMonth();\n\n  if (date.getMonth() > 1) {\n    // FEB\n    doy -= floor((4 * (date.getMonth() + 1) + 23) / 10);\n\n    if (LEAP(date.getFullYear())) {\n      doy++;\n    }\n  }\n\n  return doy;\n}\n\nexports.dayOfYear = dayOfYear;\n\nfunction LEAP(year) {\n  return !(year % 4) && (!!(year % 100) || !(year % 400));\n}\n\nexports.LEAP = LEAP;\n\nexports.greg2abs = function (date) {\n  // \"absolute date\"\n  var year = date.getFullYear() - 1;\n  return dayOfYear(date) + // days this year\n  365 * year + ( // + days in prior years\n  floor(year / 4) - // + Julian Leap years\n  floor(year / 100) + // - century years\n  floor(year / 400)); // + Gregorian leap years\n};\n/*\n * See the footnote on page 384 of ``Calendrical Calculations, Part II:\n * Three Historical Calendars'' by E. M. Reingold,  N. Dershowitz, and S. M.\n * Clamen, Software--Practice and Experience, Volume 23, Number 4\n * (April, 1993), pages 383-404 for an explanation.\n */\n\n\nexports.abs2greg = function (theDate) {\n  // calculations copied from original JS code\n  var d0 = theDate - 1;\n  var n400 = floor(d0 / 146097);\n  var d1 = floor(d0 % 146097);\n  var n100 = floor(d1 / 36524);\n  var d2 = d1 % 36524;\n  var n4 = floor(d2 / 1461);\n  var d3 = d2 % 1461;\n  var n1 = floor(d3 / 365);\n  var day = d3 % 365 + 1;\n  var year = 400 * n400 + 100 * n100 + 4 * n4 + n1;\n\n  if (4 == n100 || 4 == n1) {\n    return new Date(year, 11, 31);\n  }\n\n  return new Date(new Date(++year, 0, day).setFullYear(year)); // new Date() is very smart\n};","map":null,"metadata":{},"sourceType":"script"}