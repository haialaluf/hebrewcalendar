{"ast":null,"code":"import _slicedToArray from \"/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/src/App.js\";\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport * as Hebcal from 'hebcal';\nimport './App.css';\nconst monthNames = ['', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול', 'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'אדר ב'];\n\nfunction App() {\n  const holidays = new Hebcal.GregYear().holidays;\n  console.log(holidays);\n\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  let yesterday = null;\n\n  const tileContent = props => {\n    switch (props.view) {\n      case \"month\":\n        today = new Hebcal.HDate(new Date(props.date));\n        yesterday = today;\n        const formattedDate = \"\".concat(Hebcal.gematriya(today.day), \" \").concat(monthNames[today.month]);\n        const holiday = holidays[today.toString()];\n        let holidayString = '';\n\n        if (holiday && holiday.length) {\n          holidayString = holiday[0].desc[2];\n          holidayString = holidayString.replace('(', '');\n          holidayString = holidayString.replace(')', '');\n        }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"hebrew-string\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, formattedDate), React.createElement(\"div\", {\n          className: \"hebrew-string\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, holidayString));\n\n      case \"year\":\n        const startDate = new Date(props.date);\n        const startHebrewDate = new Hebcal.HDate(startDate);\n        const startHebrewMonth = monthNames[startHebrewDate.month];\n        const endDate = new Date(props.date);\n        endDate.setMonth(startDate.getMonth() + 1);\n        endDate.setDate(endDate.getDate() - 1);\n        const endHebrewDate = new Hebcal.HDate(endDate);\n        const endHebrewMonth = monthNames[endHebrewDate.month];\n\n        if (startHebrewMonth !== endHebrewMonth) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hebrew-string\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          }, startHebrewMonth, \" - \", endHebrewMonth));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hebrew-string\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53\n            },\n            __self: this\n          }, startHebrewMonth));\n        }\n\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Calendar, {\n    calendarType: \"Hebrew\",\n    tileContent: tileContent,\n    onChange: setDate,\n    maxDetail: \"month\",\n    minDetail: \"decade\",\n    value: date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/src/App.js"],"names":["React","useState","Calendar","Hebcal","monthNames","App","holidays","GregYear","console","log","Date","date","setDate","yesterday","tileContent","props","view","today","HDate","formattedDate","gematriya","day","month","holiday","toString","holidayString","length","desc","replace","startDate","startHebrewDate","startHebrewMonth","endDate","setMonth","getMonth","getDate","endHebrewDate","endHebrewMonth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport * as Hebcal from 'hebcal';\nimport './App.css';\n\nconst monthNames = ['', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול', \n                    'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'אדר ב']\n\nfunction App() {\n\n  const holidays = new Hebcal.GregYear().holidays;\n  console.log(holidays);\n\n  const [date, setDate] = useState(new Date());\n  let yesterday = null;\n  const tileContent = (props) => {\n    switch(props.view) {\n      case \"month\":\n        today = new Hebcal.HDate(new Date(props.date));\n        yesterday = today;\n        const formattedDate = `${Hebcal.gematriya(today.day)} ${monthNames[today.month]}`\n        const holiday = holidays[today.toString()];\n        let holidayString = '';\n        if (holiday && holiday.length) {\n          holidayString = holiday[0].desc[2];\n          holidayString = holidayString.replace('(', '');\n          holidayString = holidayString.replace(')', '');\n        }\n        return (\n          <div>\n            <div className='hebrew-string'>{formattedDate}</div>\n            <div className='hebrew-string'>{holidayString}</div>\n          </div>\n        );\n        case \"year\":\n          const startDate = new Date(props.date);\n          const startHebrewDate = new Hebcal.HDate(startDate);\n          const startHebrewMonth = monthNames[startHebrewDate.month];\n          const endDate = new Date(props.date)\n          endDate.setMonth(startDate.getMonth() + 1);\n          endDate.setDate(endDate.getDate() - 1);\n          const endHebrewDate = new Hebcal.HDate(endDate);\n          const endHebrewMonth = monthNames[endHebrewDate.month];\n          if (startHebrewMonth !== endHebrewMonth) {\n            return (\n              <div>\n                <div className='hebrew-string'>{startHebrewMonth} - {endHebrewMonth}</div>\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                <div className='hebrew-string'>{startHebrewMonth}</div>\n              </div>\n            );\n          }\n      }\n  }\n\n  return (\n    <div>\n    <Calendar\n      calendarType=\"Hebrew\"\n      tileContent={tileContent}\n      onChange={setDate}\n      maxDetail=\"month\"\n      minDetail=\"decade\"\n      value={date}\n    />\n  </div>\n);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}