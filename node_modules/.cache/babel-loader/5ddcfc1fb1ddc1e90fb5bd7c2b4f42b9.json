{"ast":null,"code":"import _slicedToArray from \"/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/src/App.js\";\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport * as Hebcal from 'hebcal';\nimport './App.css';\nconst monthNames = ['', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול', 'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'אדר ב'];\n\nfunction App() {\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 2),\n        date = _useState2[0],\n        setDate = _useState2[1];\n\n  let yesterday = null;\n\n  const tileContent = props => {\n    switch (props.view) {\n      case \"month\":\n        let today = null;\n\n        if (yesterday) {\n          today = yesterday.next();\n        } else {\n          today = new Hebcal.HDate(new Date(props.date));\n        }\n\n        yesterday = today;\n        const formattedDate = \"\".concat(Hebcal.gematriya(today.day), \" \").concat(monthNames[today.month]); // const holiday = today.holidays();\n        // let holidayString = '';\n        // if (holiday.length) {\n        //   holidayString = holiday[0].desc[2];\n        //   holidayString = holidayString.replace('(', '');\n        //   holidayString = holidayString.replace(')', '');\n        // }\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"hebrew-string\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, formattedDate));\n\n      case \"year\":\n        const startDate = new Date(props.date);\n        const startHebrewDate = new Hebcal.HDate(startDate);\n        const startHebrewMonth = monthNames[startHebrewDate.month];\n        const endDate = new Date(props.date);\n        endDate.setMonth(startDate.getMonth() + 1);\n        endDate.setDate(endDate.getDate() - 1);\n        const endHebrewDate = new Hebcal.HDate(endDate);\n        const endHebrewMonth = monthNames[endHebrewDate.month];\n\n        if (startHebrewMonth !== endHebrewMonth) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hebrew-string\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, startHebrewMonth, \" - \", endHebrewMonth));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"hebrew-string\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55\n            },\n            __self: this\n          }, startHebrewMonth));\n        }\n\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Calendar, {\n    calendarType: \"Hebrew\",\n    tileContent: tileContent,\n    onChange: setDate,\n    maxDetail: \"month\",\n    minDetail: \"decade\",\n    value: date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/haialaluf/Documents/Workspace/react-hebrew-calendar/src/App.js"],"names":["React","useState","Calendar","Hebcal","monthNames","App","Date","date","setDate","yesterday","tileContent","props","view","today","next","HDate","formattedDate","gematriya","day","month","startDate","startHebrewDate","startHebrewMonth","endDate","setMonth","getMonth","getDate","endHebrewDate","endHebrewMonth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport * as Hebcal from 'hebcal';\nimport './App.css';\n\nconst monthNames = ['', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול', \n                    'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'אדר ב']\n\nfunction App() {\n\n  const [date, setDate] = useState(new Date());\n  let yesterday = null;\n  const tileContent = (props) => {\n    switch(props.view) {\n      case \"month\":\n        let today = null;\n        if (yesterday) {\n          today = yesterday.next();\n        } else {\n          today = new Hebcal.HDate(new Date(props.date));\n        }\n        yesterday = today;\n        const formattedDate = `${Hebcal.gematriya(today.day)} ${monthNames[today.month]}`\n        // const holiday = today.holidays();\n        // let holidayString = '';\n        // if (holiday.length) {\n        //   holidayString = holiday[0].desc[2];\n        //   holidayString = holidayString.replace('(', '');\n        //   holidayString = holidayString.replace(')', '');\n        // }\n        return (\n          <div>\n            <div className='hebrew-string'>{formattedDate}</div>\n            {/* <div className='hebrew-string'>{holidayString}</div> */}\n          </div>\n        );\n        case \"year\":\n          const startDate = new Date(props.date);\n          const startHebrewDate = new Hebcal.HDate(startDate);\n          const startHebrewMonth = monthNames[startHebrewDate.month];\n          const endDate = new Date(props.date)\n          endDate.setMonth(startDate.getMonth() + 1);\n          endDate.setDate(endDate.getDate() - 1);\n          const endHebrewDate = new Hebcal.HDate(endDate);\n          const endHebrewMonth = monthNames[endHebrewDate.month];\n          if (startHebrewMonth !== endHebrewMonth) {\n            return (\n              <div>\n                <div className='hebrew-string'>{startHebrewMonth} - {endHebrewMonth}</div>\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                <div className='hebrew-string'>{startHebrewMonth}</div>\n              </div>\n            );\n          }\n      }\n  }\n\n  return (\n    <div>\n    <Calendar\n      calendarType=\"Hebrew\"\n      tileContent={tileContent}\n      onChange={setDate}\n      maxDetail=\"month\"\n      minDetail=\"decade\"\n      value={date}\n    />\n  </div>\n);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}